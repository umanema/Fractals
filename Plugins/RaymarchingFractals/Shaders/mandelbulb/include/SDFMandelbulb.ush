#pragma once

struct SDFMandelbulb
{
    float grow;
    // https://iquilezles.org/articles/mandelbulb
    float map( in float3 p, out float4 resColor )
    {
        float3 w = p;
        float m = dot(w,w);

        float4 trap = float4(abs(w),m);
        float dz = 1.0;

        for( int i=0; i<4; i++ )
        {
    #if 0
            // polynomial version (no trigonometrics, but MUCH slower)
            float m2 = m*m;
            float m4 = m2*m2;
            dz = 8.0*sqrt(m4*m2*m)*dz + 1.0;

            float x = w.x; float x2 = x*x; float x4 = x2*x2;
            float y = w.y; float y2 = y*y; float y4 = y2*y2;
            float z = w.z; float z2 = z*z; float z4 = z2*z2;

            float k3 = x2 + z2;
            float k2 = inversesqrt( k3*k3*k3*k3*k3*k3*k3 );
            float k1 = x4 + y4 + z4 - 6.0*y2*z2 - 6.0*x2*y2 + 2.0*z2*x2;
            float k4 = x2 - y2 + z2;

            w.x = p.x +  64.0*x*y*z*(x2-z2)*k4*(x4-6.0*x2*z2+z4)*k1*k2;
            w.y = p.y + -16.0*y2*k3*k4*k4 + k1*k1;
            w.z = p.z +  -8.0*y*k4*(x4*x4 - 28.0*x4*x2*z2 + 70.0*x4*z4 - 28.0*x2*z2*z4 + z4*z4)*k1*k2;
    #else
            // trigonometric version (MUCH faster than polynomial)

            // dz = 8*z^7*dz
            dz = 8.0*pow(m,3.5)*dz + 1.0;

            // z = z^8+z
            float r = length(w);
            float b = 8.0*acos( w.y/r) + grow;
            float a = 8.0*atan2( w.x, w.z );
            w = p + pow(r,8.0) * float3( sin(b)*sin(a), cos(b), sin(b)*cos(a) );
    #endif

            trap = min( trap, float4(abs(w),m) );

            m = dot(w,w);
            if( m > 256.0 )
                break;
        }

        resColor = float4(m,trap.yzw);

        // distance estimation (through the Hubbard-Douady potential)
        return 0.25*log(m)*sqrt(m)/dz;
    }

    // https://iquilezles.org/articles/normalsSDF
    float3 calcNormal( in float3 pos)
    {
        float4 tmp;
        //float2 e = float2(1.0,-1.0)*0.5773*0.25;
        float2 e = float2(1.0,-1.0)*0.001;
        return normalize( e.xyy*map( pos + e.xyy,tmp ) +
                        e.yyx*map( pos + e.yyx,tmp ) +
                        e.yxy*map( pos + e.yxy,tmp ) +
                        e.xxx*map( pos + e.xxx,tmp ) );
    }

    // https://iquilezles.org/articles/rmshadows
    float softshadow( in float3 ro, in float3 rd, in float k )
    {
        float res = 1.0;
        float t = 0.0;
        for( int i=0; i<64; i++ )
        {
            float4 kk;
            float h = map(ro + rd*t, kk);
            res = min( res, k*h/t );
            if( res<0.001 ) break;
            t += clamp( h, 0.01, 0.2 );
        }
        return clamp( res, 0.0, 1.0 );
    }



    float3 refVector( in float3 v, in float3 n )
    {
        return v;
        float k = dot(v,n);
        //return (k>0.0) ? v : -v;
        return (k>0.0) ? v : v-2.0*n*k;
    }

    float3 light1;
    float3 light2;

    float3 color1;
    float3 color2;
    float3 color3;

    float3 render(in float3 pos, in float t, in float4 tra, in float3 rd)
    {

        // colorize
        float3 col;

        col = float3(0.01,0.01,0.01);
        // col = lerp( col, float3(0.10,0.20,0.30), clamp(tra.y,0.0,1.0) );
        // col = lerp( col, float3(0.02,0.10,0.30), clamp(tra.z*tra.z,0.0,1.0) );
        // col = lerp( col, float3(0.30,0.10,0.02), clamp(pow(tra.w,6.0),0.0,1.0) );

        col = lerp( col, color1, clamp(tra.y,0.0,1.0) );
        col = lerp( col, color2, clamp(tra.z*tra.z,0.0,1.0) );
        col = lerp( col, color3, clamp(pow(tra.w,6.0),0.0,1.0) );
        col *= 0.5;

        // lighting terms
        float3  nor = calcNormal(pos);

        //nor = refVector(nor,-rd);

        float3  hal = normalize( light1-rd);
        float3  ref = reflect( rd, nor );
        float occ = clamp(0.05*log(tra.x),0.0,1.0);
        float fac = clamp(1.0+dot(rd,nor),0.0,1.0);

        // sun
        float sha1 = softshadow( pos+0.001*nor, light1, 32.0 );
        float dif1 = clamp( dot( light1, nor ), 0.0, 1.0 )*sha1;
        float spe1 = pow( clamp(dot(nor,hal),0.0,1.0), 32.0 )*dif1*(0.04+0.96*pow(clamp(1.0-dot(hal,light1),0.0,1.0),5.0));
        // bounce
        float dif2 = clamp( 0.5 + 0.5*dot( light2, nor ), 0.0, 1.0 )*occ;
        // sky
        float dif3 = (0.7+0.3*nor.y)*(0.2+0.8*occ);

        float3 lin = float3(0.0,0.0,0.0);
            lin += 12.0*float3(1.50,1.10,0.70)*dif1;
            lin +=  4.0*float3(0.25,0.20,0.15)*dif2;
            lin +=  1.5*float3(0.10,0.20,0.30)*dif3;
            lin +=  2.5*float3(0.35,0.30,0.25)*(0.05+0.95*occ);
            lin +=  4.0*fac*occ;
        col *= lin;
        col = pow( col, float3(0.7,0.9,1.0) );
        col += spe1*15.0;
        return col;
    }
};